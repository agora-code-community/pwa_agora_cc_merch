<<<<<<< HEAD
// Declare internals

var internals = {};
=======
'use strict';

// Declare internals

const internals = {};
>>>>>>> front_end_product_listing


exports.escapeJavaScript = function (input) {

    if (!input) {
        return '';
    }

<<<<<<< HEAD
    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);
=======
    let escaped = '';

    for (let i = 0; i < input.length; ++i) {

        const charCode = input.charCodeAt(i);
>>>>>>> front_end_product_listing

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeJavaScriptChar(charCode);
        }
    }

    return escaped;
};


exports.escapeHtml = function (input) {

    if (!input) {
        return '';
    }

<<<<<<< HEAD
    var escaped = '';

    for (var i = 0, il = input.length; i < il; ++i) {

        var charCode = input.charCodeAt(i);
=======
    let escaped = '';

    for (let i = 0; i < input.length; ++i) {

        const charCode = input.charCodeAt(i);
>>>>>>> front_end_product_listing

        if (internals.isSafe(charCode)) {
            escaped += input[i];
        }
        else {
            escaped += internals.escapeHtmlChar(charCode);
        }
    }

    return escaped;
};


<<<<<<< HEAD
=======
exports.escapeJson = function (input) {

    if (!input) {
        return '';
    }

    const lessThan = 0x3C;
    const greaterThan = 0x3E;
    const andSymbol = 0x26;
    const lineSeperator = 0x2028;

    // replace method
    let charCode;
    return input.replace(/[<>&\u2028\u2029]/g, (match) => {

        charCode = match.charCodeAt(0);

        if (charCode === lessThan) {
            return '\\u003c';
        }
        else if (charCode === greaterThan) {
            return '\\u003e';
        }
        else if (charCode === andSymbol) {
            return '\\u0026';
        }
        else if (charCode === lineSeperator) {
            return '\\u2028';
        }
        return '\\u2029';
    });
};


>>>>>>> front_end_product_listing
internals.escapeJavaScriptChar = function (charCode) {

    if (charCode >= 256) {
        return '\\u' + internals.padLeft('' + charCode, 4);
    }

<<<<<<< HEAD
    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
=======
    const hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
>>>>>>> front_end_product_listing
    return '\\x' + internals.padLeft(hexValue, 2);
};


internals.escapeHtmlChar = function (charCode) {

<<<<<<< HEAD
    var namedEscape = internals.namedHtml[charCode];
=======
    const namedEscape = internals.namedHtml[charCode];
>>>>>>> front_end_product_listing
    if (typeof namedEscape !== 'undefined') {
        return namedEscape;
    }

    if (charCode >= 256) {
        return '&#' + charCode + ';';
    }

<<<<<<< HEAD
    var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
=======
    const hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
>>>>>>> front_end_product_listing
    return '&#x' + internals.padLeft(hexValue, 2) + ';';
};


internals.padLeft = function (str, len) {

    while (str.length < len) {
        str = '0' + str;
    }

    return str;
};


internals.isSafe = function (charCode) {

    return (typeof internals.safeCharCodes[charCode] !== 'undefined');
};


internals.namedHtml = {
    '38': '&amp;',
    '60': '&lt;',
    '62': '&gt;',
    '34': '&quot;',
    '160': '&nbsp;',
    '162': '&cent;',
    '163': '&pound;',
    '164': '&curren;',
    '169': '&copy;',
    '174': '&reg;'
};


internals.safeCharCodes = (function () {

<<<<<<< HEAD
    var safe = {};

    for (var i = 32; i < 123; ++i) {
=======
    const safe = {};

    for (let i = 32; i < 123; ++i) {
>>>>>>> front_end_product_listing

        if ((i >= 97) ||                    // a-z
            (i >= 65 && i <= 90) ||         // A-Z
            (i >= 48 && i <= 57) ||         // 0-9
            i === 32 ||                     // space
            i === 46 ||                     // .
            i === 44 ||                     // ,
            i === 45 ||                     // -
            i === 58 ||                     // :
            i === 95) {                     // _

            safe[i] = null;
        }
    }

    return safe;
}());
