import { Observable } from '../Observable';
import { AsyncSubject } from '../AsyncSubject';
import { multicast } from './multicast';
<<<<<<< HEAD
import { ConnectableObservable } from '../observable/ConnectableObservable';
import { UnaryFunction } from '../interfaces';

export function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {
=======
import { OperatorFunction } from '../interfaces';

//TODO(benlesh): specify that the second type is actually a ConnectableObservable
export function publishLast<T>(): OperatorFunction<T, T> {
>>>>>>> front_end_product_listing
  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);
}
