{
  "_args": [
    [
      {
        "raw": "angular-cli@1.0.0-beta.28.3",
        "scope": null,
        "escapedName": "angular-cli",
        "name": "angular-cli",
        "rawSpec": "1.0.0-beta.28.3",
        "spec": "1.0.0-beta.28.3",
        "type": "version"
      },
      "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src"
    ]
  ],
  "_from": "angular-cli@1.0.0-beta.28.3",
  "_id": "angular-cli@1.0.0-beta.28.3",
  "_inCache": true,
  "_location": "/angular-cli",
  "_nodeVersion": "5.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/angular-cli-1.0.0-beta.28.3.tgz_1485978520458_0.25360454875044525"
  },
  "_npmUser": {
    "name": "angular-cli",
    "email": "hansl@google.com"
  },
  "_npmVersion": "3.5.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-cli@1.0.0-beta.28.3",
    "scope": null,
    "escapedName": "angular-cli",
    "name": "angular-cli",
    "rawSpec": "1.0.0-beta.28.3",
    "spec": "1.0.0-beta.28.3",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-cli/-/angular-cli-1.0.0-beta.28.3.tgz",
  "_shasum": "9751d7414eaf8e0b714b2461a585bfda9713416f",
  "_shrinkwrap": null,
  "_spec": "angular-cli@1.0.0-beta.28.3",
  "_where": "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src",
  "author": {
    "name": "Angular Authors"
  },
  "bin": {
    "ng": "./bin/ng"
  },
  "bugs": {
    "url": "https://github.com/angular/angular-cli/issues"
  },
  "dependencies": {
    "@angular-cli/ast-tools": "^1.0.14",
    "@angular-cli/base-href-webpack": "^1.0.14",
    "@angular/compiler": "^2.3.1",
    "@angular/compiler-cli": "^2.3.1",
    "@angular/core": "^2.3.1",
    "@ngtools/json-schema": "^1.0.0",
    "@ngtools/webpack": "^1.2.3",
    "async": "^2.1.4",
    "autoprefixer": "^6.5.3",
    "chalk": "^1.1.3",
    "common-tags": "^1.3.1",
    "css-loader": "^0.26.1",
    "cssnano": "^3.10.0",
    "debug": "^2.1.3",
    "denodeify": "^1.2.1",
    "diff": "^2.2.2",
    "ember-cli-normalize-entity-name": "^1.0.0",
    "ember-cli-string-utils": "^1.0.0",
    "exists-sync": "0.0.3",
    "extract-text-webpack-plugin": "^2.0.0-rc.1",
    "file-loader": "^0.8.5",
    "findup": "0.1.5",
    "fs-extra": "^0.30.0",
    "get-caller-file": "^1.0.0",
    "glob": "^7.0.3",
    "html-webpack-plugin": "^2.19.0",
    "inflection": "^1.7.0",
    "inquirer": "^0.12.0",
    "isbinaryfile": "^2.0.3",
    "json-loader": "^0.5.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.8.0",
    "less": "^2.7.2",
    "less-loader": "^2.2.3",
    "lodash": "^4.11.1",
    "minimatch": "^3.0.3",
    "node-modules-path": "^1.0.0",
    "node-sass": "^4.3.0",
    "nopt": "^3.0.1",
    "opn": "4.0.1",
    "ora": "^0.2.0",
    "portfinder": "1.0.9",
    "postcss-loader": "^0.9.1",
    "raw-loader": "^0.5.1",
    "remap-istanbul": "^0.6.4",
    "resolve": "^1.1.7",
    "rimraf": "^2.5.3",
    "rsvp": "^3.0.17",
    "sass-loader": "^4.1.1",
    "script-loader": "^0.7.0",
    "semver": "^5.1.0",
    "silent-error": "^1.0.0",
    "source-map-loader": "^0.1.5",
    "sourcemap-istanbul-instrumenter-loader": "^0.2.0",
    "style-loader": "^0.13.1",
    "stylus": "^0.54.5",
    "stylus-loader": "^2.4.0",
    "temp": "0.8.3",
    "through": "^2.3.6",
    "typescript": "~2.0.3",
    "url-loader": "^0.5.7",
    "walk-sync": "^0.2.6",
    "webpack": "2.2.0",
    "webpack-dev-server": "2.2.0-rc.0",
    "webpack-merge": "^2.4.0",
    "webpack-sources": "^0.1.3",
    "zone.js": "^0.7.2"
  },
  "deprecated": "angular-cli has been renamed to @angular/cli. Please update your dependencies.",
  "description": "CLI tool for Angular",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9751d7414eaf8e0b714b2461a585bfda9713416f",
    "tarball": "https://registry.npmjs.org/angular-cli/-/angular-cli-1.0.0-beta.28.3.tgz"
  },
  "ember-addon": {
    "paths": [
      "./"
    ],
    "main": "./addon/index.js"
  },
  "engines": {
    "node": ">= 4.1.0",
    "npm": ">= 3.0.0"
  },
  "homepage": "https://github.com/angular/angular-cli",
  "keywords": [
    "angular",
    "angular-cli"
  ],
  "license": "MIT",
  "main": "lib/cli/index.js",
  "maintainers": [
    {
      "name": "angular-cli",
      "email": "hansl@google.com"
    }
  ],
  "name": "angular-cli",
  "optionalDependencies": {},
  "readme": "## Angular-CLI\n\n[![Join the chat at https://gitter.im/angular/angular-cli](https://badges.gitter.im/angular/angular-cli.svg)](https://gitter.im/angular/angular-cli?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status][travis-badge]][travis-badge-url]\n[![Dependency Status][david-badge]][david-badge-url]\n[![devDependency Status][david-dev-badge]][david-dev-badge-url]\n[![npm][npm-badge]][npm-badge-url]\n\nPrototype of a CLI for Angular applications based on the [ember-cli](http://www.ember-cli.com/) project.\n\n## Note\n\nThis project is very much still a work in progress.\n\nThe CLI is now in beta.\nIf you wish to collaborate while the project is still young, check out [our issue list](https://github.com/angular/angular-cli/issues).\n\nBefore submitting new issues, have a look at [issues marked with the `type: faq` label](https://github.com/angular/angular-cli/issues?utf8=%E2%9C%93&q=is%3Aissue%20label%3A%22type%3A%20faq%22%20).\n\n## Webpack update\n\nWe changed the build system between beta.10 and beta.14, from SystemJS to Webpack.\nAnd with it comes a lot of benefits.\nTo take advantage of these, your app built with the old beta will need to migrate.\n\nYou can update your `beta.10` projects to `beta.14` by following [these instructions](https://github.com/angular/angular-cli/wiki/Upgrading-from-Beta.10-to-Beta.14).\n\n## Prerequisites\n\nBoth the CLI and generated project have dependencies that require Node 4 or higher, together\nwith NPM 3 or higher.\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Generating a New Project](#generating-and-serving-an-angular2-project-via-a-development-server)\n* [Generating Components, Directives, Pipes and Services](#generating-components-directives-pipes-and-services)\n* [Generating a Route](#generating-a-route)\n* [Creating a Build](#creating-a-build)\n* [Build Targets and Environment Files](#build-targets-and-environment-files)\n* [Base tag handling in index.html](#base-tag-handling-in-indexhtml)\n* [Bundling](#bundling)\n* [Running Unit Tests](#running-unit-tests)\n* [Running End-to-End Tests](#running-end-to-end-tests)\n* [Proxy To Backend](#proxy-to-backend)\n* [Deploying the App via GitHub Pages](#deploying-the-app-via-github-pages)\n* [Linting code](#linting-code)\n* [Commands autocompletion](#commands-autocompletion)\n* [Project assets](#project-assets)\n* [Global styles](#global-styles)\n* [CSS preprocessor integration](#css-preprocessor-integration)\n* [3rd Party Library Installation](#3rd-party-library-installation)\n* [Global Library Installation](#global-library-installation)\n* [Updating angular-cli](#updating-angular-cli)\n* [Development Hints for hacking on angular-cli](#development-hints-for-hacking-on-angular-cli)\n\n## Installation\n\n**BEFORE YOU INSTALL:** please read the [prerequisites](#prerequisites)\n```bash\nnpm install -g angular-cli\n```\n\n## Usage\n\n```bash\nng help\n```\n\n### Generating and serving an Angular2 project via a development server\n\n```bash\nng new PROJECT_NAME\ncd PROJECT_NAME\nng serve\n```\nNavigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\nYou can configure the default HTTP port and the one used by the LiveReload server with two command-line options :\n\n```bash\nng serve --host 0.0.0.0 --port 4201 --live-reload-port 49153\n```\n\n### Generating Components, Directives, Pipes and Services\n\nYou can use the `ng generate` (or just `ng g`) command to generate Angular components:\n\n```bash\nng generate component my-new-component\nng g component my-new-component # using the alias\n\n# components support relative path generation\n# if in the directory src/app/feature/ and you run\nng g component new-cmp\n# your component will be generated in src/app/feature/new-cmp\n# but if you were to run\nng g component ../newer-cmp\n# your component will be generated in src/app/newer-cmp\n```\nYou can find all possible blueprints in the table below:\n\nScaffold  | Usage\n---       | ---\nComponent | `ng g component my-new-component`\nDirective | `ng g directive my-new-directive`\nPipe      | `ng g pipe my-new-pipe`\nService   | `ng g service my-new-service`\nClass     | `ng g class my-new-class`\nInterface | `ng g interface my-new-interface`\nEnum      | `ng g enum my-new-enum`\nModule    | `ng g module my-module`\n\n### Generating a route\n\nThe CLI supports routing in several ways:\n\n- We include the `@angular/router` NPM package when creating or initializing a project.\n\n- When you generate a module, you can use the `--routing` option like `ng g module my-module --routing`  to create a separate file `my-module-routing.module.ts` to store the module routes.\n\n  The file includes an empty `Routes` object that you can fill with routes to different components and/or modules.\n\n  The `--routing` option also generates a default component with the same name as the module.\n\n- You can use the `--routing` option with `ng new` to create a `app-routing.module.ts` file when you create or initialize a project.\n\n<!-- DeleteSection1 Start here to remove upon next release -->\n### Creating a build\n\n```bash\nng build\n```\n\nThe build artifacts will be stored in the `dist/` directory.\n\n### Build Targets and Environment Files\n\n`ng build` can specify both a build target (`--target=production` or `--target=development`) and an\nenvironment file to be used with that build (`--environment=dev` or `--environment=prod`).\nBy default, the development build target and environment are used.\n\nThe mapping used to determine which environment file is used can be found in `angular-cli.json`:\n\n```json\n\"environments\": {\n  \"source\": \"environments/environment.ts\",\n  \"dev\": \"environments/environment.ts\",\n  \"prod\": \"environments/environment.prod.ts\"\n}\n```\n\nThese options also apply to the serve command. If you do not pass a value for `environment`,\nit will default to `dev` for `development` and `prod` for `production`.\n\n```bash\n# these are equivalent\nng build --target=production --environment=prod\nng build --prod --env=prod\nng build --prod\n# and so are these\nng build --target=development --environment=dev\nng build --dev --e=dev\nng build --dev\nng build\n```\n\nYou can also add your own env files other than `dev` and `prod` by doing the following:\n- create a `src/environments/environment.NAME.ts`\n- add `{ \"NAME\": 'src/environments/environment.NAME.ts' }` to the `apps[0].environments` object in `angular-cli.json`\n- use them via the `--env=NAME` flag on the build/serve commands.\n\n### Base tag handling in index.html\n\nWhen building you can modify base tag (`<base href=\"/\">`) in your index.html with `--base-href your-url` option.\n\n```bash\n# Sets base tag href to /myUrl/ in your index.html\nng build --base-href /myUrl/\nng build --bh /myUrl/\n```\n\n### Bundling\n\nAll builds make use of bundling, and using the `--prod` flag in  `ng build --prod`\nor `ng serve --prod` will also make use of uglifying and tree-shaking functionality.\n\n### Running unit tests\n\n```bash\nng test\n```\n\nTests will execute after a build is executed via [Karma](http://karma-runner.github.io/0.13/index.html), and it will automatically watch your files for changes. You can run tests a single time via `--watch=false` or `--single-run`.\n\nYou can run tests with coverage via `--code-coverage`. The coverage report will be in the `coverage/` directory.\n\nLinting during tests is also available via the `--lint` flag. See [Linting code](#linting-code) chapter for more information.\n\n### Running end-to-end tests\n\n```bash\nng e2e\n```\n\nBefore running the tests make sure you are serving the app via `ng serve`.\n\nEnd-to-end tests are run via [Protractor](https://angular.github.io/protractor/).\n\n### Proxy To Backend\nUsing the proxying support in webpack's dev server we can highjack certain urls and send them to a backend server.\nWe do this by passing a file to `--proxy-config`\n\nSay we have a server running on `http://localhost:3000/api` and we want all calls to `http://localhost:4200/api` to go to that server.\n\nWe create a file next to projects `package.json` called `proxy.conf.json`\nwith the content\n\n```json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\nYou can read more about what options are available here [webpack-dev-server proxy settings](https://webpack.github.io/docs/webpack-dev-server.html#proxy)\n\nand then we edit the `package.json` file's start script to be\n\n```json\n\"start\": \"ng serve --proxy-config proxy.conf.json\",\n```\n\nnow run it with `npm start`\n\n### Deploying the app via GitHub Pages\n\nYou can deploy your apps quickly via:\n\n```bash\nng github-pages:deploy --message \"Optional commit message\"\n```\n\nThis will do the following:\n\n- creates GitHub repo for the current project if one doesn't exist\n- rebuilds the app in production mode at the current `HEAD`\n- creates a local `gh-pages` branch if one doesn't exist\n- moves your app to the `gh-pages` branch and creates a commit\n- edit the base tag in index.html to support GitHub Pages\n- pushes the `gh-pages` branch to GitHub\n- returns back to the original `HEAD`\n\nCreating the repo requires a token from GitHub, and the remaining functionality\nrelies on ssh authentication for all git operations that communicate with github.com.\nTo simplify the authentication, be sure to [setup your ssh keys](https://help.github.com/articles/generating-ssh-keys/).\n\nIf you are deploying a [user or organization page](https://help.github.com/articles/user-organization-and-project-pages/), you can instead use the following command:\n\n```bash\nng github-pages:deploy --user-page --message \"Optional commit message\"\n```\n\nThis command pushes the app to the `master` branch on the GitHub repo instead\nof pushing to `gh-pages`, since user and organization pages require this.\n\n\n### Linting code\n\nYou can lint your app code by running `ng lint`.\nThis will use the `lint` npm script that in generated projects uses `tslint`.\n\nYou can modify the these scripts in `package.json` to run whatever tool you prefer.\n\n<!-- DeleteSection1 End here -->\n\n <!-- consider removing autocompletion from readme -->\n### Commands autocompletion\n\nTo turn on auto completion use the following commands:\n\nFor bash:\n```bash\nng completion 1>> ~/.bashrc 2>>&1\nsource ~/.bashrc\n```\n\nFor zsh:\n```bash\nng completion 1>> ~/.zshrc 2>>&1\nsource ~/.zshrc\n```\n\nWindows users using gitbash:\n```bash\nng completion 1>> ~/.bash_profile 2>>&1\nsource ~/.bash_profile\n```\n\n### Project assets\n\nYou use the `assets` array in `angular-cli.json` to list files or folders you want to copy as-is when building your project:\n```json\n\"assets\": [\n  \"assets\",\n  \"favicon.ico\"\n]\n```\n\n<!-- DeleteSection2 Start here to remove upon next release -->\n### Global styles\n\nThe `styles.css` file allows users to add global styles and supports\n[CSS imports](https://developer.mozilla.org/en/docs/Web/CSS/@import).\n\nIf the project is created with the `--style=sass` option, this will be a `.sass`\nfile instead, and the same applies to `scss/less/styl`.\n\nYou can add more global styles via the `apps[0].styles` property in `angular-cli.json`.\n\n### CSS Preprocessor integration\n\nAngular-CLI supports all major CSS preprocessors:\n- sass/scss ([http://sass-lang.com/](http://sass-lang.com/))\n- less ([http://lesscss.org/](http://lesscss.org/))\n- stylus ([http://stylus-lang.com/](http://stylus-lang.com/))\n\nTo use these preprocessors simply add the file to your component's `styleUrls`:\n\n```javascript\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n```\n\nWhen generating a new project you can also define which extension you want for\nstyle files:\n\n```bash\nng new sassy-project --style=sass\n```\n\nOr set the default style on an existing project:\n\n```bash\nng set defaults.styleExt scss\n```\n\n### 3rd Party Library Installation\n\nSimply install your library via `npm install lib-name --save` and import it in your code.\n\nIf the library does not include typings, you can install them using npm:\n\n```bash\nnpm install d3 --save\nnpm install @types/d3 --save-dev\n```\n\nIf the library doesn't have typings available at `@types/`, you can still use it by\nmanually adding typings for it:\n\n1. First, create a `typings.d.ts` file in your `src/` folder. This file will be automatically included as global type definition.\n\n2. Then, in `src/typings.d.ts`, add the following code:\n\n  ```typescript\n  declare module 'typeless-package';\n  ```\n\n3. Finally, in the component or file that uses the library, add the following code:\n\n  ```typescript\n  import * as typelessPackage from 'typeless-package';\n  typelessPackage.method();\n  ```\n\nDone. Note: you might need or find useful to define more typings for the library that you're trying to use.\n\n### Global Library Installation\n\nSome javascript libraries need to be added to the global scope, and loaded as if\nthey were in a script tag. We can do this using the `apps[0].scripts` and\n`apps[0].styles` properties of `angular-cli.json`.\n\nAs an example, to use [Bootstrap 4](http://v4-alpha.getbootstrap.com/) this is\nwhat you need to do:\n\nFirst install Bootstrap from `npm`:\n\n```bash\nnpm install bootstrap@next\n```\n\nThen add the needed script files to `apps[0].scripts`:\n\n```json\n\"scripts\": [\n  \"../node_modules/jquery/dist/jquery.js\",\n  \"../node_modules/tether/dist/js/tether.js\",\n  \"../node_modules/bootstrap/dist/js/bootstrap.js\"\n],\n```\n\nFinally add the Bootstrap CSS to the `apps[0].styles` array:\n```json\n\"styles\": [\n  \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n  \"styles.css\"\n],\n```\n\nRestart `ng serve` if you're running it, and Bootstrap 4 should be working on\nyour app.\n\n<!-- DeleteSection2 End here -->\n\n### Updating angular-cli\n\nTo update `angular-cli` to a new version, you must update both the global package and your project's local package.\n\nGlobal package:\n```bash\nnpm uninstall -g angular-cli\nnpm cache clean\nnpm install -g angular-cli@latest\n```\n\nLocal project package:\n```bash\nrm -rf node_modules dist # use rmdir on Windows\nnpm install --save-dev angular-cli@latest\nnpm install\nng update\n```\n\nRunning `ng update` will check for changes in all the auto-generated files created by `ng new` and allow you to update yours. You are offered four choices for each changed file: `y` (overwrite), `n` (don't overwrite), `d` (show diff between your file and the updated file) and `h` (help).\n\nCarefully read the diffs for each code file, and either accept the changes or incorporate them manually after `ng update` finishes.\n\n**The main cause of errors after an update is failing to incorporate these updates into your code**.\n\nYou can find more details about changes between versions in [CHANGELOG.md](https://github.com/angular/angular-cli/blob/master/CHANGELOG.md).\n\n\n## Development Hints for hacking on angular-cli\n\n### Working with master\n\n```bash\ngit clone https://github.com/angular/angular-cli.git\ncd angular-cli\nnpm link\n```\n\n`npm link` is very similar to `npm install -g` except that instead of downloading the package\nfrom the repo, the just cloned `angular-cli/` folder becomes the global package.\nAny changes to the files in the `angular-cli/` folder will immediately affect the global `angular-cli` package,\nallowing you to quickly test any changes you make to the cli project.\n\nNow you can use `angular-cli` via the command line:\n\n```bash\nng new foo\ncd foo\nnpm link angular-cli\nng serve\n```\n\n`npm link angular-cli` is needed because by default the globally installed `angular-cli` just loads\nthe local `angular-cli` from the project which was fetched remotely from npm.\n`npm link angular-cli` symlinks the global `angular-cli` package to the local `angular-cli` package.\nNow the `angular-cli` you cloned before is in three places:\nThe folder you cloned it into, npm's folder where it stores global packages and the `angular-cli` project you just created.\n\nYou can also use `ng new foo --link-cli` to automatically link the `angular-cli` package.\n\nPlease read the official [npm-link documentation](https://www.npmjs.org/doc/cli/npm-link.html)\nand the [npm-link cheatsheet](http://browsenpm.org/help#linkinganynpmpackagelocally) for more information.\n\n\n## License\n\nMIT\n\n\n[travis-badge]: https://travis-ci.org/angular/angular-cli.svg?branch=master\n[travis-badge-url]: https://travis-ci.org/angular/angular-cli\n[david-badge]: https://david-dm.org/angular/angular-cli.svg\n[david-badge-url]: https://david-dm.org/angular/angular-cli\n[david-dev-badge]: https://david-dm.org/angular/angular-cli/dev-status.svg\n[david-dev-badge-url]: https://david-dm.org/angular/angular-cli?type=dev\n[npm-badge]: https://img.shields.io/npm/v/angular-cli.svg\n[npm-badge-url]: https://www.npmjs.com/package/angular-cli\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/angular-cli.git"
  },
  "scripts": {},
  "trackingCode": "UA-8594346-19",
  "version": "1.0.0-beta.28.3"
}
