{
  "_args": [
    [
      {
        "raw": "fileset@0.2.x",
        "scope": null,
        "escapedName": "fileset",
        "name": "fileset",
        "rawSpec": "0.2.x",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\istanbul"
    ]
  ],
  "_from": "fileset@>=0.2.0 <0.3.0",
  "_id": "fileset@0.2.1",
  "_inCache": true,
  "_location": "/fileset",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "mklabs",
    "email": "daniel.mickael@gmail.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {
    "brace-expansion": "1.1.8",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "fileset@0.2.x",
    "scope": null,
    "escapedName": "fileset",
    "name": "fileset",
    "rawSpec": "0.2.x",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/istanbul"
  ],
  "_resolved": "https://registry.npmjs.org/fileset/-/fileset-0.2.1.tgz",
  "_shasum": "588ef8973c6623b2a76df465105696b96aac8067",
  "_shrinkwrap": null,
  "_spec": "fileset@0.2.x",
  "_where": "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\istanbul",
  "author": {
    "name": "mklabs"
  },
  "bugs": {
    "url": "https://github.com/mklabs/node-fileset/issues"
  },
  "dependencies": {
    "glob": "5.x",
    "minimatch": "2.x"
  },
  "description": "Wrapper around miniglob / minimatch combo to allow multiple patterns matching and include-exclude ability",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "588ef8973c6623b2a76df465105696b96aac8067",
    "tarball": "https://registry.npmjs.org/fileset/-/fileset-0.2.1.tgz"
  },
  "gitHead": "3de76b59cbd8255a191bd9e91041c4fee7538092",
  "homepage": "https://github.com/mklabs/node-fileset",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mklabs/node-fileset/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/fileset",
  "maintainers": [
    {
      "name": "mklabs",
      "email": "daniel.mickael@gmail.com"
    }
  ],
  "name": "fileset",
  "optionalDependencies": {},
  "readme": "# node-fileset [![Build Status](https://secure.travis-ci.org/mklabs/node-fileset.png)](http://travis-ci.org/mklabs/node-fileset)\r\n\r\nExposes a basic wrapper on top of\r\n[Glob](https://github.com/isaacs/node-glob) /\r\n[minimatch](https://github.com/isaacs/minimatch) combo both written by\r\n@isaacs. Glob now uses JavaScript instead of C++ bindings which makes it\r\nusable in Node.js 0.6.x and Windows platforms.\r\n\r\n[![NPM](https://nodei.co/npm/fileset.png?downloads=true&stars=true)](https://nodei.co/npm/fileset/)\r\n\r\nAdds multiples patterns matching and exlude ability. This is\r\nbasically just a sugar API syntax where you can specify a list of includes\r\nand optional exclude patterns. It works by setting up the necessary\r\nminiglob \"fileset\" and filtering out the results using minimatch.\r\n\r\n*[Changelog](https://github.com/mklabs/node-fileset/blob/master/CHANGELOG.md#changelog)*\r\n\r\n## Install\r\n\r\n    npm install fileset\r\n\r\n## Usage\r\n\r\nCan be used with callback or emitter style.\r\n\r\n* **include**: list of glob patterns `foo/**/*.js *.md src/lib/**/*`\r\n* **exclude**: *optional* list of glob patterns to filter include\r\n  results `foo/**/*.js *.md`\r\n* **callback**: *optional* function that gets called with an error if\r\n  something wrong happend, otherwise null with an array of results\r\n\r\nThe callback is optional since the fileset method return an instance of\r\nEventEmitter which emit different events you might use:\r\n\r\n* *match*: Every time a match is found, miniglob emits this event with\r\n  the pattern.\r\n* *include*: Emitted each time an include match is found.\r\n* *exclude*: Emitted each time an exclude match is found and filtered\r\n  out from the fileset.\r\n* *end*:  Emitted when the matching is finished with all the matches\r\n  found, optionally filtered by the exclude patterns.\r\n\r\n#### Callback\r\n\r\n```js\r\nvar fileset = require('fileset');\r\n\r\nfileset('**/*.js', '**.min.js', function(err, files)Â {\r\n  if (err) return console.error(err);\r\n\r\n  console.log('Files: ', files.length);\r\n  console.log(files);\r\n});\r\n```\r\n\r\n#### Event emitter\r\n\r\n```js\r\nvar fileset = require('fileset');\r\n\r\nfileset('**.coffee README.md *.json Cakefile **.js', 'node_modules/**')\r\n  .on('match', console.log.bind(console, 'error'))\r\n  .on('include', console.log.bind(console, 'includes'))\r\n  .on('exclude', console.log.bind(console, 'excludes'))\r\n  .on('end', console.log.bind(console, 'end'));\r\n```\r\n\r\n`fileset` returns an instance of EventEmitter, with an `includes` property\r\nwhich is the array of Fileset objects (inheriting from\r\n`miniglob.Miniglob`) that were used during the mathing process, should\r\nyou want to use them individually.\r\n\r\nCheck out the\r\n[tests](https://github.com/mklabs/node-fileset/tree/master/tests) for\r\nmore examples.\r\n\r\n## Sync usage\r\n\r\n```js\r\nvar results = fileset.sync('*.md *.js', 'CHANGELOG.md node_modules/**/*.md node_modules/**/*.js');\r\n```\r\n\r\nThe behavior should remain the same, although it lacks the last `options` arguments to pass to internal `glob` and `minimatch` dependencies.\r\n\r\n## Tests\r\n\r\nRun `npm test`\r\n\r\n## Why\r\n\r\nMainly for a build tool with cake files, to provide me an easy way to get\r\na list of files by either using glob or path patterns, optionally\r\nallowing exclude patterns to filter out the results.\r\n\r\nAll the magic is happening in\r\n[Glob](https://github.com/isaacs/node-glob) and\r\n[minimatch](https://github.com/isaacs/minimatch). Check them out!\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mklabs/node-fileset.git"
  },
  "scripts": {
    "test": "node tests/test.js && node tests/test-sync.js"
  },
  "version": "0.2.1"
}
