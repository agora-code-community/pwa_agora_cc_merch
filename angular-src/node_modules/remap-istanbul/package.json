{
  "_args": [
    [
      {
        "raw": "remap-istanbul@^0.6.4",
        "scope": null,
        "escapedName": "remap-istanbul",
        "name": "remap-istanbul",
        "rawSpec": "^0.6.4",
        "spec": ">=0.6.4 <0.7.0",
        "type": "range"
      },
      "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\angular-cli"
    ]
  ],
  "_from": "remap-istanbul@>=0.6.4 <0.7.0",
  "_id": "remap-istanbul@0.6.4",
  "_inCache": true,
  "_location": "/remap-istanbul",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/remap-istanbul-0.6.4.tgz_1463053512074_0.1312488131225109"
  },
  "_npmUser": {
    "name": "sitepen",
    "email": "labs@sitepen.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "remap-istanbul@^0.6.4",
    "scope": null,
    "escapedName": "remap-istanbul",
    "name": "remap-istanbul",
    "rawSpec": "^0.6.4",
    "spec": ">=0.6.4 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular-cli",
    "/karma-remap-istanbul"
  ],
  "_resolved": "https://registry.npmjs.org/remap-istanbul/-/remap-istanbul-0.6.4.tgz",
  "_shasum": "ac551eff1aa641504b4f318d0303dda61e3bb695",
  "_shrinkwrap": null,
  "_spec": "remap-istanbul@^0.6.4",
  "_where": "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\angular-cli",
  "bin": {
    "remap-istanbul": "./bin/remap-istanbul"
  },
  "bugs": {
    "url": "https://github.com/SitePen/remap-istanbul"
  },
  "dependencies": {
    "amdefine": "1.0.0",
    "gulp-util": "3.0.7",
    "istanbul": "0.4.3",
    "source-map": ">=0.5.6",
    "through2": "2.0.1"
  },
  "description": "A tool for remapping Istanbul coverage via Source Maps",
  "devDependencies": {
    "codecov.io": "0.1.6",
    "grunt": "^1.0.1",
    "gulp": "3.9.1",
    "intern": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ac551eff1aa641504b4f318d0303dda61e3bb695",
    "tarball": "https://registry.npmjs.org/remap-istanbul/-/remap-istanbul-0.6.4.tgz"
  },
  "gitHead": "8271ce0c5ba34a8c0995d75fe42845d8cd3ce7c8",
  "homepage": "http://dojotoolkit.org",
  "keywords": [
    "gulpplugin",
    "gruntplugin",
    "source-map",
    "istanbul",
    "coverage"
  ],
  "license": "BSD-3-Clause",
  "main": "main.js",
  "maintainers": [
    {
      "name": "kitsonk",
      "email": "me@kitsonkelly.com"
    },
    {
      "name": "bryanforbes",
      "email": "bryan@reigndropsfall.net"
    }
  ],
  "name": "remap-istanbul",
  "optionalDependencies": {},
  "readme": "# remap-istanbul\n\n[![Build Status](https://travis-ci.org/SitePen/remap-istanbul.svg?branch=master)](https://travis-ci.org/SitePen/remap-istanbul) [![codecov.io](http://codecov.io/github/SitePen/remap-istanbul/coverage.svg?branch=master)](http://codecov.io/github/SitePen/remap-istanbul?branch=master)\n[![npm version](https://badge.fury.io/js/remap-istanbul.svg)](http://badge.fury.io/js/remap-istanbul)\n\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/SitePen/remap-istanbul.svg)](http://isitmaintained.com/project/SitePen/remap-istanbul \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/SitePen/remap-istanbul.svg)](http://isitmaintained.com/project/SitePen/remap-istanbul \"Percentage of issues still open\")\n\nA package that provides the ability to remap [Istanbul](https://gotwarlost.github.io/istanbul/) code coverage information to its original source positions based on a JavaScript [Source Maps v3](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.djovrt4kdvga).\n\n`remap-istanbul` requires NodeJS 0.12 or later (which includes any version of io.js).\n\n## How to get Help\n\nThis is covered in depth in the [CONTRIBUTING.md](CONTRIBUTING.md#how-to-get-help) document in the repo.\n\n## Usage\n\nFor information on how to use `remap-istanbul` with common testing frameworks, please visit the [wiki](https://github.com/SitePen/remap-istanbul/wiki).\n\nThere are three main modules that constitute the **remap-istanbul** package:\n\n - **lib/loadCoverage** - does the basic loading of a Istanbul JSON coverage files.  It can \"merge\" several coverage files, for example if you are collecting remote coverage from other environments and combining it together.\n - **lib/remap** - does the remapping of the coverage information.  It iterates through all the files in the coverage information and looks for JavaScript Source Maps which it will then use to remap the coverage information to the original source.\n - **lib/writeReport** - a wrapper for the Istanbul report writers to output the any final coverage reports.\n\n### Command Line\n\nThe package includes a command line interface which should be placed into the `./node_modules/.bin/remap-istanbul` when the package is installed.  The command line interface understands the following argument flags:\n\n|Flag                |Description|\n|--------------------|-----------|\n|`-i` or `--input`   |The path to the coverage input file. For example `remap-istanbul --input coverage.json`. If omitted, input will be taken from stdin.|\n|`-o` or `--output`  |The path to the remapped coverage output file.  For example `remap-istanbul --output coverage-final.json`. If omitted, `json` output will be sent to stdout.|\n|`-t` or `--type`    |The type of report the output should be.  For example `remap-istanbul --output html-report --type html`. If omitted, output defaults to `json`.|\n|`-b` or `--basePath`|When remapping the source files, instead of using the path in the source map, substitute this this path.|\n|`-e` or `--exclude`|Pass in a comma seperated string of patterns to exclude from the output.  For example `remap-istanbul --output coverage-final.json --exclude node_modules,tests`|\n\nAn example of piping a coverage file to the CLI and writing it out to a file:\n\n```bash\n$ cat coverage-final.json | ./node_modules/.bin/remap-istanbul -o coverage-remapped.json\n```\n\nAn example of generating an HTML report off of remapped coverage:\n\n```bash\n$ ./node_modules/.bin/remap-istanbul -i coverage-final.json -o html-report -t html\n```\n\nAn example of taking the stdin and writing the stdout in the CLI:\n\n```bash\n$ cat coverage-final.json | ./node_modules/.bin/remap-istanbul > coverage-remap.json\n```\n\n### Basic JavaScript\n\nThe main CommonJS module provided combines the modules above into a single API which basic usage can look like this:\n\n```js\nvar remapIstanbul = require('remap-istanbul');\nremapIstanbul('coverage-final.json', {\n\t'json': 'coverage-final.json'\n});\n```\n\nThis would take the coverage file provided.  The function accepts the following arguments:\n\n|Argument|Type|Description|\n|--------|----|-----------|\n|sources|Array, string|Either an array of strings or a string the represent the JSON Istanbul files to be remapped|\n|reports|Object|A hash of reports, where the keys are the Istanbul report types and the values are the destination for the report. To send output to the console use the destination null.|\n|*returns*|Promise|A promise that is resolved when all the reports are written|\n\n### AMD\n\nThe main modules are provided in AMD for usage (although they utilize `amdefine` to allow transparent loading by a CommonJS loader such as NodeJS's `require` - see blow).\n\n#### `lib/loadCoverage`\n\nThe `lib/loadCoverage` module would be used something like this:\n\n```js\nrequire([ 'remap-istanbul/lib/loadCoverage' ], function (loadCoverage) {\n\tvar coverage = loadCoverage('coverage-final.json');\n\t/* or if you have multiple files you want to merge */\n\tcoverage = loadCoverage([ 'coverage-ie.json', 'coverage-chrome.json', 'coverage-firefox.json' ]);\n});\n```\n\nThe argument signature for `loadCoverage` is:\n\n|Argument|Type|Description|\n|--------|----|-----------|\n|coverage|Array/string|Either an array of strings or a string representing the file path to the coverage file(s).|\n|options|Object?|An object that allows providing alternative methods, mainly used for integration with other systems (e.g. Grunt)|\n|*returns*|Object|A coverage object that is ready to be remapped|\n\nThe `options` argument can take the following optional properties:\n\n|Property|Type|Default|Description|\n|--------|----|-------|-----------|\n|readJSON|Function|`JSON.parse(fs.readFileSync)`|A function that will synchronously read a file and return a POJO based on the JSON data in the file|\n|warn|Function|`console.warn`|A function that logs warning messages|\n\n#### `lib/remap`\n\nUsage of the `lib/remap` module would look something like this:\n\n```js\nrequire([\n\t'remap-istanbul/lib/loadCoverage',\n\t'remap-istanbul/lib/remap'\n], function (loadCoverage, remap) {\n\tvar coverage = loadCoverage('coverage-final.json');\n\tvar collector = remap(coverage); /* collector now contains the remapped coverage */\n});\n```\n\nIf the source map no longer points properly at the source files, you can utilize the `basePath` option to override the path retrieved from the source map:\n\n```js\nrequire([\n\t'remap-istanbul/lib/loadCoverage',\n\t'remap-istanbul/lib/remap'\n], function (loadCoverage, remap) {\n\tvar coverage = loadCoverage('coverage-final.json');\n\tvar collector = remap(coverage, {\n\t\tbasePath: 'some/other/path/to/sources'\n\t});\n});\n```\n\nThe argument signature for `remap` is:\n\n|Argument|Type|Description|\n|--------|----|-----------|\n|coverage|Array/Object|Either an array of coverage objects or a single coverage object.|\n|options|Object?|An object that allows providing alternative methods, mainly used for integration with other systems (e.g. Grunt)|\n|*returns*|istanbul/lib/collector|An Istanbul coverage collector that is ready to be output|\n\nThe argument of `options` can contain the following properties:\n\n|Property|Type|Default|Description|\n|--------|----|-------|-----------|\n|basePath|String|Path found in source map|A string to use as the base path for the source locations|\n|exclude|String/RegEx|`undefined`|If the filename of the source coverage file matches, it will be skipped while mapping the coverage|\n|readFile|Function|`fs.readFileSync`|A function that will synchronously read a file|\n|readJSON|Function|`JSON.parse(fs.readFileSync)`|A function that will synchronously read a file and return a POJO based on the JSON data in the file|\n|warn|Function|`console.warn`|A function that logs warning messages|\n\n#### `lib/writeReport`\n\nThe `lib/writeReport` module would be used something like this:\n\n```js\nrequire([\n\t'remap-istanbul/lib/loadCoverage',\n\t'remap-istanbul/lib/remap',\n\t'remap-istanbul/lib/writeReport'\n], function (remap, writeReport) {\n\tvar collector = remap(loadCoverage('coverage-final.json'));\n\twriteReport(collector, 'json', 'coverage-final.json').then(function () {\n\t\t/* do something else now */\n\t});\n});\n```\n\nThe `writeReport` function can take the following arguments:\n\n|Argument|Type|Description|\n|--------|----|-----------|\n|collector|istanbul/lib/collector|This is an Istanbul coverage collector (usually returned from `remap` which is to be written out in a report)|\n|reportType|string|The type of the report. Valid values are: `clover`, `cobertura`, `html`, `json-summary`, `json`, `file`, `lcovonly`, `teamcity`, `text-lcov`, `text-summary` or `text`|\n|dest|string, Function|The destination file, directory or console logging function that is the destination of the report. Only `text-lcov` takes the logging function and will default to `console.log` if no value is passed.|\n|*returns*|Promise|A promise that is resolved when the report is written.|\n\n### CommonJS\n\nIf you are not using an AMD loader, that is not a problem for consuming the modules.  They also can be loaded in a\nCommonJS environment:\n\n```js\nvar loadCoverage = require('remap-istanbul/lib/loadCoverage');\nvar remap = require('remap-istanbul/lib/remap');\nvar writeReport = require('remap-istanbul/lib/writeReport');\n```\n\n### Grunt Task\n\nYou can utilize this package as a [Grunt](http://gruntjs.com) task.  After installing it as a package, you need to add the following to your `Gruntfile.js`:\n\n```js\ngrunt.loadNpmTasks('remap-istanbul');\n```\n\nThe task is a multi-target task and a basic configuration for the task would look something like this:\n\n```js\ngrunt.initConfig({\n\tremapIstanbul: {\n\t\tbuild: {\n\t\t\tsrc: 'coverage-final.json',\n\t\t\toptions: {\n\t\t\t\treports: {\n\t\t\t\t\t'lcovhtml': 'html-report',\n\t\t\t\t\t'json': 'coverage-final.json'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\nThis would take in `coverage-final.json`, remap it and then output the Istanbul HTML report to `html-report`\nand overwrite the original `coverage-final.json`.\n\nThe task also recognizes an abbreviated version of configuration:\n\n```js\ngrunt.initConfig({\n\tremapIstanbul: {\n\t\tbuild: {\n\t\t\tfiles: [ {\n\t\t\t\tsrc: 'coverage.json',\n\t\t\t\tdest: 'tmp/coverage.json',\n\t\t\t\ttype: 'json'\n\t\t\t} ]\n\t\t}\n\t}\n});\n```\n\nBy default, the grunt task will log warnings/errors to the `grunt.log.error`.  If instead you wish the\ngrunt task to `grunt.fail.warn` which will require `--force` to ensure the task does not fail the whole\nbuild, you should supply the `fail` option in the task configuration:\n\n```js\ngrunt.initConfig({\n\tremapIstanbul: {\n\t\tbuild: {\n\t\t\tsrc: 'coverage-final.json',\n\t\t\toptions: {\n\t\t\t\tfail: true\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n### Gulp Plugin\n\nYou can utilize this package as a [gulp](http://gulpjs.com) plugin.  There are two main ways it can be\nused.  Just taking a coverage file, remapping and outputting it would look like this:\n\n```js\nvar gulp = require('gulp');\nvar remapIstanbul = require('remap-istanbul/lib/gulpRemapIstanbul');\n\ngulp.task('remap-istanbul', function () {\n\treturn gulp.src('coverage-final.json')\n\t\t.pipe(remapIstanbul())\n\t\t.pipe(gulp.dest('coverage-remapped.json'));\n});\n```\n\nAnother way is to utilize the plugin is to have the plugin write out the Istanbul reports directly.\nThis can be accomplished by passing a `reports` property in the options.  For example, to have the JSON\ncoverage report output in addition to the HTML coverage report, at task would look like this:\n\n```js\nvar gulp = require('gulp');\nvar remapIstanbul = require('remap-istanbul/lib/gulpRemapIstanbul');\n\ngulp.task('remap-istanbul', function () {\n\treturn gulp.src('coverage-final.json')\n\t\t.pipe(remapIstanbul({\n\t\t\treports: {\n\t\t\t\t'json': 'coverage.json',\n\t\t\t\t'html': 'html-report'\n\t\t\t}\n\t\t}));\n});\n```\n\nBy default, errors in the gulp task will be considered non-fatal and will just be logged to the\nconsole.  If you wish errors to be emitted and fail the task, you need to supply the task with\n`fail` being truthy:\n\n```js\nvar gulp = require('gulp');\nvar remapIstanbul = require('remap-istanbul/lib/gulpRemapIstanbul');\n\ngulp.task('remap-istanbul', function () {\n\treturn gulp.src('coverage-final.json')\n\t\t.pipe(remapIstanbul({\n\t\t\tfail: true\n\t\t}));\n});\n```\n\n### Intern Reporter\n\nThe package comes with an [Intern](https://theintern.github.io/) reporter that makes it easy to output the `coverage.json` from a test run.  The most common usage from the command line would be something like:\n\n```sh\nnode_modules/.bin/intern-runner config=tests/intern reporters=Console reporters=node_modules/remap-istanbul/lib/intern-reporters/JsonCoverage\n```\n\nThis will output a `coverage-final.json` in the root of your project, which you can use with the rest of `remap-istanbul` to remap it back to the source files.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SitePen/remap-istanbul.git"
  },
  "scripts": {
    "test": "tests/run.sh"
  },
  "version": "0.6.4"
}
