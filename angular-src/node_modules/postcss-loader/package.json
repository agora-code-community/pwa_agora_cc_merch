{
  "_args": [
    [
      {
        "raw": "postcss-loader@^0.9.1",
        "scope": null,
        "escapedName": "postcss-loader",
        "name": "postcss-loader",
        "rawSpec": "^0.9.1",
        "spec": ">=0.9.1 <0.10.0",
        "type": "range"
      },
      "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\angular-cli"
    ]
  ],
  "_from": "postcss-loader@>=0.9.1 <0.10.0",
  "_id": "postcss-loader@0.9.1",
  "_inCache": true,
  "_location": "/postcss-loader",
  "_nodeVersion": "5.11.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/postcss-loader-0.9.1.tgz_1462015659367_0.5116496600676328"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {
    "big.js": "3.2.0",
    "emojis-list": "2.1.0",
    "json5": "0.5.1",
    "object-assign": "4.1.1"
  },
  "_requested": {
    "raw": "postcss-loader@^0.9.1",
    "scope": null,
    "escapedName": "postcss-loader",
    "name": "postcss-loader",
    "rawSpec": "^0.9.1",
    "spec": ">=0.9.1 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular-cli"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-0.9.1.tgz",
  "_shasum": "87a3e70f58e46d68a75badc6725d9ea4773fd1d7",
  "_shrinkwrap": null,
  "_spec": "postcss-loader@^0.9.1",
  "_where": "E:\\codes\\Web\\pwa_agora_cc_merch\\angular-src\\node_modules\\angular-cli",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.14",
    "postcss": "^5.0.19"
  },
  "description": "PostCSS loader for webpack",
  "devDependencies": {
    "chai": "3.5.0",
    "eslint-config-postcss": "2.0.2",
    "fs-extra": "0.30.0",
    "gulp": "3.9.1",
    "gulp-eslint": "2.0.0",
    "gulp-mocha": "2.2.0",
    "json-loader": "0.5.4",
    "postcss-js": "0.1.2",
    "postcss-safe-parser": "1.0.7",
    "raw-loader": "0.5.1",
    "webpack-stream": "3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "87a3e70f58e46d68a75badc6725d9ea4773fd1d7",
    "tarball": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-0.9.1.tgz"
  },
  "gitHead": "21ad7e7dc0d559347cd41acbe2e77f9db110fccc",
  "homepage": "https://github.com/postcss/postcss-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "css",
    "postcss",
    "postcss-runner"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "postcss-loader",
  "optionalDependencies": {},
  "readme": "# PostCSS for Webpack [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] loader for [webpack] to postprocesses your CSS with [PostCSS plugins].\n\n<a href=\"https://evilmartians.com/?utm_source=postcss-loader\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[PostCSS]:         https://github.com/postcss/postcss\n[webpack]:         http://webpack.github.io/\n[ci-img]:          https://travis-ci.org/postcss/postcss-loader.svg\n[ci]:              https://travis-ci.org/postcss/postcss-loader\n\n## Usage\n\nInstall `postcss-loader`:\n\n```console\nnpm install postcss-loader --save-dev\n```\n\nSet `postcss` section in webpack config:\n\n```js\nvar precss       = require('precss');\nvar autoprefixer = require('autoprefixer');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return [precss, autoprefixer];\n    }\n}\n```\n\n> This example implementation uses two plugins that may need to be installed:\n>\n> ```console\n> npm install precss --save-dev\n> npm install autoprefixer --save-dev\n> ```\n\nNow your CSS files requirements will be processed by selected PostCSS plugins:\n\n```js\nvar css = require('./file.css');\n// => CSS after Autoprefixer and CSSWring\n```\n\nNote that the context of this function\n\n```js\nmodule.exports = {\n    ...\n    postcss: function () {\n        return [autoprefixer, precss];\n    }\n}\n```\n\nwill be set to the [webpack loader-context].\nIf there is the need, this will let you access to webpack loaders API.\n\n[webpack loader-context]: http://webpack.github.io/docs/loaders.html#loader-context\n\n## Plugins Packs\n\nIf you want to process different styles by different PostCSS plugins you can\ndefine plugin packs in `postcss` section and use them by `?pack=name` parameter.\n\n```js\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.docs\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader?pack=cleaner\"\n            },\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return {\n            defaults: [precss, autoprefixer],\n            cleaner:  [autoprefixer({ browsers: [] })]\n        };\n    }\n}\n```\n\n## Integration with postcss-import\n\nWhen using [postcss-import] plugin, you may want to tell webpack about\ndependencies coming from your `@import` directives.\nFor example: in watch mode, to enable recompile on change.\n\nHere is a simple way to let know postcss-import to pass files to webpack:\n\n```js\nvar postcssImport = require('postcss-import');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function (webpack) {\n        return [\n            postcssImport({\n                addDependencyTo: webpack\n            })\n        ];\n    }\n}\n```\n\n[webpack loader-context]: http://webpack.github.io/docs/loaders.html#loader-context\n[postcss-import]:         https://github.com/postcss/postcss-import\n\n## Integration with CSS Modules\n\n`postcss-loader` [cannot be used] with [CSS Modules] out of the box due\nto the way `css-loader` processes file imports. To make them work properly,\neither add the css-loader’s [`importLoaders` option]:\n\n```js\n{\n    test:   /\\.css$/,\n    loader: \"style-loader!css-loader?modules&importLoaders=1!postcss-loader\"\n}\n```\n\nor use [postcss-modules] plugin instead of `css-loader`.\n\n[`importLoaders` option]: https://github.com/webpack/css-loader#importing-and-chained-loaders\n[postcss-modules]:        https://github.com/outpunk/postcss-modules\n[cannot be used]:         https://github.com/webpack/css-loader/issues/137\n[CSS Modules]:            https://github.com/webpack/css-loader#css-modules\n\n## JS Styles\n\nIf you want to process styles written in JavaScript\nyou can use the [postcss-js] parser.\n\n```js\n{\n    test:   /\\.style.js$/,\n    loader: \"style-loader!css-loader!postcss-loader?parser=postcss-js\"\n}\n```\n\nOr use can use even ES6 in JS styles by Babel:\n\n```js\n{\n    test:   /\\.style.js$/,\n    loader: \"style-loader!css-loader!postcss-loader?parser=postcss-js!babel\"\n}\n```\n\nAs result you will be able to write styles as:\n\n```js\nimport colors from '../config/colors';\n\nexport default {\n    '.menu': {\n        color: colors.main,\n        height: 25,\n        '&_link': {\n            color: 'white'\n        }\n    }\n}\n```\n\n[postcss-js]: https://github.com/postcss/postcss-js\n\n## Custom Syntaxes\n\nPostCSS can transforms styles in any syntax, not only in CSS.\nThere are 3 parameters to control syntax:\n\n* `syntax` accepts module name with `parse` and `stringify` function.\n* `parser` accepts module name with input parser function.\n* `stringifier` accepts module name with output stringifier function.\n\nFor example, you can use [Safe Parser] to find and fix any CSS errors:\n\n```js\nvar css = require('postcss?parser=postcss-safe-parser!./broken')\n```\n\n[Safe Parser]: https://github.com/postcss/postcss-safe-parser\n\nIf you need to pass the function directly instead of a module name,\nyou can do so through the webpack postcss option, as such:\n\n```js\nvar sugarss = require('sugarss')\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return {\n            plugins: [autoprefixer, precss],\n            syntax: sugarss\n        };\n    }\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-loader.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "version": "0.9.1"
}
